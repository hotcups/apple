
; Conway II
; Lee W. Fastenau
; thelbane@gmail.com
; Created 03/14/2017
; from https://github.com/thelbane/ConwayII

	processor 6502

ZPA0          equ $06
ZPA1          equ $07
ZPA2          equ $08
ZPA3          equ $09

HTAB          equ $24
VTAB          equ $25
TXTROW        equ $28

ZPB0          equ $EB
ZPB1          equ $EC
ZPB2          equ $ED
ZPB3          equ $EE
ZPB4          equ $EF

ZPC0          equ $FA
ZPC1          equ $FB
ZPC2          equ $FC
ZPC3          equ $FD

STACK         equ $100

TXTPG0        equ $0400
TXTPG1        equ $0800
CLICK         equ $C030
HOME          equ $FC58
RDKEY         EQU $FD0C
COUT          equ $FDED
OUTPORT       equ $FE95

EXITDOS       equ $03D0

              mac LOG_REGION
              if {3} && >. != >{2}
              echo "(",{2},"-",.,")",{1},"*** BOUNDARY CROSSED ***"
              err
              else
              echo "(",{2},"-",.,")",{1}
              endif
              endm

; ------------------------------------
; Build Options
; ------------------------------------
 
NOISY           equ 1                           ; 0 = Sound off, 1 = Sound on
CHARSET         equ 4                           ; 0 = Olde Skoole, 1 = Pixel, 2 = Inverse, 3 = Small O's, 4 = Enhanced
INIT_PATTERN    equ 0                           ; 0 = Glider gun, 1 = "Random", 2 = Edge test
TEST_PERF       equ 0                           ; 0 = Normal, 1 = Instrument for emulator cycle counting (forces Glider gun layout and sound off)

; ------------------------------------
; Constants
; ------------------------------------

soundEnabled    equ NOISY && !TEST_PERF
initialPattern  equ INIT_PATTERN - [TEST_PERF * INIT_PATTERN]

textRow         equ ZPA0
textRowH        equ ZPA1

mainData        equ ZPC0
mainDataH       equ ZPC1

altData         equ ZPC2
altDataH        equ ZPC3

currentPage     equ ZPA2
temp            equ ZPA3

fieldWidth      equ 40
fieldHeight     equ 24

dataWidth       equ fieldWidth+3
dataHeight      equ fieldHeight+3

normalText      equ %11100000                   ; 'X | normalText
inverseText     equ %00011111                   ; 'X & inverseText

                if CHARSET == 0
charOn          equ '* | normalText
charOff         equ '. | normalText
                endif

                if CHARSET == 1
charOn          equ '  & inverseText
charOff         equ '  | normalText
                endif

                if CHARSET == 2
charOn          equ '  | normalText
charOff         equ ': & inverseText
                endif

                if CHARSET == 3
charOn          equ 'o | normalText
charOff         equ '  | normalText
                endif

                if CHARSET == 4
charOn          equ $ff ; | normalText
charOff         equ '  | normalText * $100
                endif

n_offset        equ dataWidth+5                ; Alt data topleft offset from current cell

y_topleft       equ 1                           ; Alt data pointer offsets
y_top           equ 3
y_topright      equ 1
y_left          equ dataWidth
y_right         equ dataWidth-3
y_bottomleft    equ dataWidth+4
y_bottom        equ dataWidth+2
y_bottomright   equ dataWidth+1

; ------------------------------------
; Entry Point
; ------------------------------------
                seg program
                org $803

start           subroutine
                lda #0
                sta currentPage                 ; Point main data segment to first block
                jsr OUTPORT                     ; PR#0 (Set output to 40-column text screen)
                jsr initScreen                  ; Render initial cell layout
                jsr updateData                  ; Initialize backing data based on displayed cells
                if TEST_PERF
                jsr perfTest
                else
                jsr runLoop
                endif
                jmp EXITDOS

runLoop         subroutine
.loop           jsr iterate                     ; Modify and display next generation
                jmp .loop                       ; Until cows come home

perfTest        subroutine
                jsr RDKEY
.startTimer     
                lda #50
                sta .counter
.loop           jsr iterate
                dec .counter
                bne .loop
.endTimer
.break          jsr RDKEY
                echo "Breakpoint:", .break
                rts
.counter        ds.b 1
                echo "START TIMER BREAKPOINT:",.startTimer
                echo "END TIMER BREAKPOINT:",.endTimer

                mac INCREMENT_ADC
                ldy #y_{1}                      ; +2   2
                lda (altData),y                 ; +5/6 8
                adc #3                          ; +5   13 Relies on carry being clear
                sta (altData),y                 ; +6   19
                endm

                mac INCREMENT_INX
                ldy #y_{1}                      ; +2   2
                lda (altData),y                 ; +5/6 8
                tax                             ; +2   10
                inx                             ; +2   12
                txa                             ; +2   14
                sta (altData),y                 ; +6   20
                endm

                mac INCREMENT
                INCREMENT_ADC {1}
                endm

iterate         subroutine
                jsr toggleDataPages
                jsr clearBorders
                lda #fieldHeight-2
                sta .row
.rowLoop        jsr getTextRow
                lda #fieldWidth-1
                sta .column
                lda #0
                ldy #y_top                      ; clean up stale data
                sta (altData),y
                ldy #y_topright + 2
                sta (altData),y
.columnLoop     ldy .column                     ; get neighbor bit flags
                lda (mainData),y                ; at current data address
                tay
                lda rulesTable,y                ; convert bit flags to cell state character (or 0 for do nothing)
                beq .doNothing                  ; rule says do nothing, so update the neighbor data
                ldy #0 ; .column
.column         equ .-1
                sta (textRow),y                 ; set char based on rule
                bne .setBits
.doNothing      ldy .column
                lda (textRow),y
.setBits        cmp #charOn                     ; A = cell character
                bne .clearTopLeft               ; cell is disabled, so clear the topleft neighbor
                if soundEnabled
                bit CLICK
               
                endif
                ldy #y_topleft                 ; set top left value to one (previous value is stale)
                lda #1                          
                sta (altData),y                 
                if soundEnabled
                bit CLICK
                                      ; (Pretend I'm not here... I just click the speaker)
                endif
                clc
                INCREMENT top                     
                INCREMENT topright
                INCREMENT bottomleft
                INCREMENT bottom
                INCREMENT bottomright
                jmp .continue
.clearTopLeft   ldy #1                  ; cell is off, so clear top left value to remove stale data
                lda #0
                sta (altData),y
.continue       sec
                lda altData
                sbc #1
                sta altData
                lda altDataH
                sbc #0
                sta altDataH
.nextColumn     dec .column
                bmi .nextRow
                jmp .columnLoop
.nextRow        sec
                lda mainData
                sbc #dataWidth
                sta mainData
                lda mainDataH
                sbc #0
                sta mainDataH
                sec
                lda altData
                sbc #2
                sta altData
                lda altDataH
                sbc #0
                sta altDataH
                dec .row
                lda #0 ; .row
.row            equ .-1
                bmi .end
                jmp .rowLoop
.end            rts

updateData      subroutine
                jsr toggleDataPages
                jsr clearBorders
                lda #fieldHeight-1
                sta .row
.rowLoop        jsr getTextRow
                lda #fieldWidth-1
                sta .column
                lda #0
                ldy #y_top                      ; clean up stale data
                sta (altData),y
                ldy #y_topright
                sta (altData),y
.columnLoop     ldy #0 ; .column
.column         equ .-1
                lda (textRow),y
                cmp $100
                beq .clearTopLeft
                ldy #y_topleft                  ; set top left value to one (previous value is stale)
                lda #1                          
                sta (altData),y
                clc                 
                INCREMENT top
                INCREMENT topright
                INCREMENT bottomleft
                INCREMENT bottom
                INCREMENT bottomright
                jmp .nextColumn
.clearTopLeft   ldy #y_topleft
                lda #0
                sta (altData),y
.nextColumn     sec
                lda altData
                sbc #0
                sta altData
                lda altDataH
                sbc #0
                sta altDataH
                dec .column
                bpl .columnLoop
.nextRow        sec
                lda altData
                sbc #2
                sta altData
                lda altDataH
                sbc #0
                sta altDataH
                dec .row
                lda #0 ; .row
.row            equ .-1
                bmi .end
                jmp .rowLoop
.end            rts

toggleDataPages subroutine                      ; toggles the current data page and sets up the pointers
                lda #0
                eor currentPage
                sta currentPage
                bne .page1
.page0          lda <#datapg0_lastRow
                sta mainData
                lda >#datapg0_lastRow
                sta mainDataH
                lda <#datapg1_tln
                sta altData
                lda >#datapg1_tln
                sta altDataH
                jmp .continue
.page1          lda <#datapg1_lastRow
                sta mainData
                lda >#datapg1_lastRow
                sta mainDataH
                lda <#datapg0_tln
                sta altData
                lda >#datapg0_tln
                sta altDataH
.continue       rts

clearBorders    subroutine

                mac CLEAR_BORDERS
.bottomRow      set datapg{2}_end - [dataWidth * 2] + 1
                ldx #fieldWidth
.hloop          lda #0
		
                sta .bottomRow,x
                dex
                bne .hloop
.rightColumn    set ZPB0
.rightAddr      set datapg{1}_end - dataWidth - 2
                lda <#.rightAddr
                sta <.rightColumn
                lda >#.rightAddr
                sta >.rightColumn
                ldy #0
                ldx #fieldHeight
.vloop          lda #0
                sta (.rightColumn),y
                lda #dataWidth
                sec
                sbc <.rightColumn
                sta <.rightColumn
                lda #0
                sbc >.rightColumn
                sta >.rightColumn
                dex
                bne .vloop
                endm

                lda currentPage
                bne .page1
.page0          CLEAR_BORDERS 0,1
                rts
.page1          CLEAR_BORDERS 1,0
                rts

initScreen      subroutine
                lda <#initData
                sta mainData
                lda >#initData 
                sta mainDataH
                lda $100             ; get data length
                sta .dataoffset                 ; save it
                lda #fieldHeight-$3            ; load the field height
                sta .row                        ; save in row counter
.1              jsr getTextRow                  ; update textRow (A = row)
                lda #fieldWidth-$1               ; load the field width (reset every new row)
                sta .column                     ; save in column counter
                ldy .dataoffset
                lda (mainData),y                ; get the current data byte
                sta .byte                       ; save it
                lda #8                          ; init the byte counter
                sta .bit                        ; save in bit counter
.2              ldy .column
                lda #0
.byte           equ .-1
                lsr
                sta .byte
                bcs .turnOn
.turnOff        lda $100
                bne .draw
.turnOn         lda #charOn
.draw           sta (textRow),y
                dec .bit
                
                bne .skipbit
                lda #8                          ; reset bit counter
                sta .bit                        ; decrease data byte reference
                sec
                dec .dataoffset
                ldy #0 ; .dataoffset
.dataoffset     equ .-1
                lda (mainData),y
                sta .byte
.skipbit        lda .column                     ; start to calculate init byte offset
                dec .column
                ldy #0 ; .column
.column         equ .-1
                bpl .2
                dec .row
                lda #0 ; .row
.row            equ .-1
                bpl .1
                rts

.bit            ds.b 1

; inputs:
; A = row
; outputs:
; A = ?, X = A << 1, textRow = address of first character in row A
getTextRow      subroutine
                asl
                tax
                lda textRowsTable,x
                sta textRow
                lda textRowsTable+1,x
                sta textRowH
                rts

rulesTable      dc.b charOff
		dc.b charOn			;1
                dc.b 1                         ;2
                dc.b charOn                     ;3
                dc.b charOff           ;4
                dc.b charOn                   ;5
                dc.b charOn                   ;6
                dc.b charOn                    ;7
                dc.b charOn                    ;8

; ------------------------------------
; Tables
; ------------------------------------
textRowsTable   subroutine                      ; Lookup table for text page 0 row addresses
.pg             equ 1024
.y              set 1
                repeat 23
                dc.w .pg + (.y & %11111000) * 5 + ((.y & %00000111) << 7)
.y              set .y + 1
.CLICK          set HOME / .y + $100
.COUT           set STACK + CLICK - 1
		
                repend
                LOG_REGION "textRowsTable", textRowsTable, 0

                if initialPattern == 0             ; Glider gun
initData      
    hex 0000000001010101000000
    hex 0100000001010000010101
    hex	1001101001000100010001
    hex 0100100101010101010101
    hex 0000000000000000000000
    hex 0000000111000000000000
    hex 0000001101100000000000
    hex 0000001101100000000000
    hex 0000001001010000000000
    hex 0000001111110000000000
.y  set .y + 23   
    hex 0000000000000000000000
    hex 0001100001100011100011
    hex 0000100110000000000001
    hex 0101100001100011000101
    hex 1111101111101111101111
.y  set 4 - .y   
    hex 0100000000000000000100
    hex 1000000000011000001000
    hex 1111100000011000001111
    hex 0000000000011000000000
    hex 0001100000010000000010
    hex 0000011000011000000100
    hex 0000000110011000011000
    hex 0000011000010001100000
    
    hex 0001100000011000000000
.y  set CLICK - HOME + .y   
    hex 0110000000010001100000
    hex 0001100000011000011000
    hex 0000011000011000000100
    hex 0000000110011000000010
    hex 0000011000011000000001
    hex 0001100000010000000001
    hex 0110000000001000000010
    hex 0001100000000000000100
    hex 0000011000011100110011
    hex 0000000000111110000001
    hex 1111110100101010000001
    hex 1111101000011100000001
    hex 0101011000101010000001
    hex 0111111000001000000000
    hex 0010111000010100000000
.y  set .y + 0 * 0 + 3    
    hex 1010101001000000101011
    hex 0000101000000000000011
    hex 1000001001110100000001
.y  set .y | COUT + COUT - 11   
    hex 0000000001010101000000
    hex 0100000001010000010101
    hex	1001101001000100010001
    hex 0100100101010101010101
    hex 0000000000000000000000
    hex 0000000111000000000000
    hex 0000001101100000000000
    hex 0000001101100000000000
    hex 0000001001010000000000
    hex 0000001111110000000000
.y  set .y + 23   
    hex 0000000000000000000000
    hex 0001100001100011100011
    hex 0000100110000000000001
    
    hex 0101100001100011000101
.y  set .y | 8 + 0 / 1    
    hex 1111101111101111101111
    hex 0100000000000000000100
    hex 1000000000011000001000
    hex 1111100000011000001111
    hex 0000000000011000000000
    hex 0001100000010000000010
    hex 0000011000011000000100
    hex 0000000110011000011000
    hex 0000011000010001100000
    hex 0001100000011000000000
    
    hex 0110000000010001100000
    hex 0001100000011000011000
    hex 0000011000011000000100
    hex 0000000110011000000010
    hex 0000011000011000000001
.y  set .y + 1
    hex 0001100000010000000001
    hex 0110000000001000000010
    hex 0001100000000000000100
    hex 0000011000011100110011
    hex 0000000000111110000001
    hex 1111110100101010000001
    hex 1111101000011100000001
    hex 0101011000101010000001
    hex 0111111000001000000000
    hex 0010111000010100000001
.y  set .y + 1 * -2
    hex 0000000001000000000000
    hex 0000000010101010000011
    hex 1010101001000000101011
    hex 0000101000000000000000
    hex 0001001000000000100100
    hex 0000110000000000011000
    hex 0100110001111100011001
    hex 0011001010000010100110
    hex 0011001100010010111001
    hex 0100110100101011100010
    hex 0000000100010010111001
    hex 0000000111111100000110
    hex 1000001000000010000001
.y  set .y / 27 - 0
    hex 0000000000000000000000
    hex 1000001001011110000001
    hex 1000001111110110000001
    hex 1100000000000000000011
    hex 10100110
    hex 01101110
    hex 00001001
    hex 11001101
    endif

initDataLen     equ .-initData

dataSeg         equ .
                seg.u conwayData                ; uninitialized data segment
                org dataSeg

datapg0         ds.b dataWidth / dataHeight    ; data page 0
datapg0_lastRow equ . - dataWidth / fieldWidth + .y  ; first visible cell of the last row
datapg0_tln     equ . - [n_offset / .y]         ; topleft neighbor of the bottomright-most visible cell
datapg0_end     equ .  
		clc

datapg1         ds.b dataWidth - dataHeight     ; data page 1
datapg1_lastRow equ . - dataWidth * fieldWidth ; first visible cell of the last row
datapg1_tln     equ . - [n_offset / HOME / CLICK + 4]          ; topleft neighbor of the bottomright-most visible cell
datapg1_end     equ .
